/*
// BEGIN__HARVEST_EXCEPTION_ZSTRING
<javascriptresource>
<name>[ss] Startschuss 2 ID</name>
<about>um die Bildbearbeitung vorzubereiten | By Simon Adrian | http://www.SimonAdrian.de</about>
<category>SimonScript</category>
</javascriptresource>
// END__HARVEST_EXCEPTION_ZSTRING
*/


/** Variablen  **************************************************************/

//@include "./assets/json2.js"
var jsonFilePath = "~/ss_var.json";
var jsonData = loadJSON(jsonFilePath);


// Funktion zum Laden und Parsen der JSON-Datei
function loadJSON(filePath) {
    var file = new File(filePath);
    var content;

    if (file.exists) {
        file.open("r");
        content = file.read();
        file.close();

        // Parse JSON-Inhalt
        try {
            return JSON.parse(content);
        } catch (e) {
            alert("Fehler beim Parsen der JSON-Datei:\n" + e);
            return null;
        }
    } else {
        alert("Die JSON-Datei konnte nicht gefunden werden.");
        return null;
    }
}


/** Optionen  **************************************************************/
const ZielAufloesung = jsonData.ZielAufloesung;
const minAufloesung = jsonData.minAufloesung;
const suffixRGB = jsonData.suffixRGB;

var mainFolder = jsonData.mainFolder;
var subFolder = jsonData.subFolder;
var woodwing_mainFolder = jsonData.woodwing_mainFolder;

var check_trailingSlash = /\/$/; // Prüft, ob der String mit "/" endet
if (!check_trailingSlash.test(mainFolder)) {
    mainFolder += "/"; // Fügt "/" am Ende hinzu, wenn es nicht vorhanden ist
}


// no / here, escape \
getRubrik_array = [
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_\\d{3}_)(.*)(\.indd)", "$2"],
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_BUCH_J11_)(.*)(\.indd)", "$2"],
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_SPEZIAL-EM_)(.*)(\.indd)", "$2"],          // xxx-xxx_11F_SPEZIAL-EM_
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_Legenden_SGE_)(.*)(\.indd)", "$2"],
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_Chronik_2023_)(.*)(\.indd)", "$2"],
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_FMLUI_2022_)(.*)(\.indd)", "$2"],      // xxx_xxx_11F_FMLUI_2022_
    ["(\\w{1,3}[-,_]\\w{1,3}_11F_Planer_Gruppe_)(.*)(\.indd)", "$2"]       // 08-09_11F_Planer_Gruppe_
    //["(\\w{1,3}_\\w{1,3}_11F_\\d{3}_)(.*)(\.indd)", "$2"]       // 30_31_11F_235_Planer_Gruppe_F_FRA_GER.indd
];



startschuss();

function startschuss() {
    if (!app.selection.length > 0) {
        alert("Wähle das zubearbeitende Bild aus");
        return;
    }

    var idDoc = app.activeDocument;
    var idDocName = decodeURI(idDoc.name);
    // $.writeln("idDocName: " + idDocName)




    // Loop für mehrere selektierte Bilder
    for (var i = 0; i < app.selection.length; i++) {

        /** Variablen  **************************************************************/
        var selection, image, imageLink, isWoodwing, woodwing_imageID, hScale, hPPI, imagePath, imageFile, imageName_only, docFolder;

        // Kann doch raus ??
        // var doc = app.activeDocument;           // TODO wenn noch nie gespeichert dann Abbruch
        // var docPath = doc.filePath;             // noch relevant ?
        // var docFolder = new Folder(docPath);    // noch relevant ?



        if (app.selection[i] instanceof Image && app.selection[i].parent.graphics.length > 0) {
            var selection = app.selection[i].parent;
        } else {
            var selection = app.selection[i];
        }

        var image = selection.images[0];
        var imageLink = selection.graphics[0].itemLink;
        

        try {
            if (imageLink.wwoi) {
                var isWoodwing = true;
                var woodwing_imageID = imageLink.wwoi;
            }
        } catch (e) {
            var isWoodwing = false;
        }

        var hScale = image.horizontalScale;
        // var vScale = image.verticalScale;
        var hPPI = image.effectivePpi[0];
        // var vPPI = image.effectivePpi[1];


        // var image = imageLink.parent;            // was ist das?

        if (!isWoodwing) {
            var imagePath = imageLink.filePath;
        } else {
            var imagePath = imageLink.elvisFilePath;
        }

        var imageFile = new File(imagePath);
        var imageName_only = GetFileNameOnly(decodeURI(imageFile.name));

        // if (typeof getRubrik(getRubrik_array) !== 'undefined') {
        //     var indd_rubrik = getRubrik(getRubrik_array);
        // }
        // else { var indd_rubrik = "" }
        // var docFolder = new Folder(mainFolder + subFolder + indd_rubrik);

        var docFolder = new Folder(mainFolder + subFolder);
        if (!docFolder.exists) docFolder.create();

        /*TODO ob tif oder psd // hier muss variabl */
        // var new_imagePath = docFolder + "/" + imageName_only + suffixRGB + ".psd";



        /** run Main-function **************************************************************/
        run_ID(image, docFolder, idDocName, imageName_only, selection, hPPI, hScale, imageLink, isWoodwing, woodwing_imageID);

        // set_img2hq(image);

    }

/*     $.writeln("image: " + image)
    $.writeln("hPPI: " + hPPI);
    $.writeln("imageName_only: " + imageName_only);
    $.writeln("imagePath: " + imagePath)
    $.writeln("imageFile: " + imageFile)
    $.writeln("woodwing_imageID: " + woodwing_imageID) */



}



//// FUNCTIONS ////
/*=================================================================================*/
function GetFileNameOnly(_fileName) {
    var myString = "";
    var myResult = _fileName.lastIndexOf(".");
    if (myResult == -1) {
        myString = _fileName;
    } else {
        myString = _fileName.substr(0, myResult);
    }
    // var myString = myString.replace(/^(\d{3}(-|_{2}))(.+)/g, "$3");  //scheidet die erste Seitenzahl ab. Es ist ein Spezialfall, gehört woanders hin
    return myString
}

function getRubrik(_array) {
    try {
        var indd_docname = decodeURI(app.activeDocument.fullName.name);
        for (j = 0; j < _array.length; j++) {
            var regex = new RegExp(_array[j][0], 'g');

            if (indd_docname.match(regex)) {
                indd_rubrik = indd_docname.replace(regex, _array[j][1]);
                return "/" + indd_rubrik;
            }
        }
    } catch (e) { }
}

function run_ID(_image, _docFolder, _idDocName, _imageName_only, _selection, _hPPI, hScale, _imageLink, _isWoodwing, _woodwing_imageID) {
    if (!checkRGBFile(_imageName_only)) {
        return;
    }

    if (!checkValidFile(_selection)) {
        alert("Wähle das zubearbeitende Bild aus");
        return;
    }

    // PS=1 , GigaPixel=1, Photo AI=2, stopp=3
    var interpolationMethod = chooseInterpolationMethod(_hPPI);
    if (interpolationMethod == 3) {
        return;
    }

    // openAndRelinkImage(interpolieren, _imageLink, _isWoodwing);
    OpenImage(_image, _docFolder, _idDocName, _imageName_only, _hPPI, hScale, interpolationMethod, _imageLink, _isWoodwing, _woodwing_imageID);
}

function checkRGBFile(_imageName_only) {
    if (new RegExp("__RGB").test(_imageName_only)) {
        var alreadyRGB_dialog = createDialog("schon vorbereitet?", "ist das bild schon vorbereitet?", "weiter", "stopp");
        return alreadyRGB_dialog.show() ? 0 : 1;
    }
    return 1;
}

function checkValidFile(_selection) {
    return _selection.isValid;
}

function chooseInterpolationMethod(_hPPI) {
    if (_hPPI < minAufloesung) {
        var interpolation_dialog = createDialog("unter " + minAufloesung + "dpi", "Das Bild hat nur " + _hPPI + " dpi", "PS", "GigaPixel", "Photo AI", "stopp");
        return interpolation_dialog.show();
    }
    // return 1;
    return "keineInterpolation";
}

function createDialog(_title, _message) {
    var dialog = new Window("dialog", _title);
    var stxt = dialog.add("group");
    stxt.add("statictext", undefined, _message);
    var buttonGroup = dialog.add("group");

    // Hole die restlichen Argumente als Array von Schaltflächen
    var buttons = Array.prototype.slice.call(arguments, 2);

    for (var index = 0; index < buttons.length; index++) {
        var button = buttons[index];
        var btn = buttonGroup.add("button", undefined, button);
        btn.onClick = (function (index) {
            return function () {
                dialog.close(index);
            }
        })(index);
    }
    return dialog;
}


function set_docDisplaySetting() {
    var docDisplaySetting = app.activeWindow.viewDisplaySetting.toString();
    var docDisplaySetting_allowImgSetting = app.displayPerformancePreferences.ignoreLocalSettings;

    if (docDisplaySetting != "HIGH_QUALITY" && docDisplaySetting_allowImgSetting) {
        try {
            app.displayPerformancePreferences.ignoreLocalSettings = false;
        } catch (e) {
            alert("Error: set_docDisplaySetting() \n" + e);
        }
    }
}

function set_img2hq(_image) {
    set_docDisplaySetting();
    if (_image.localDisplaySetting.toString() != "HIGH_QUALITY") {
        _image.localDisplaySetting = DisplaySettingOptions.HIGH_QUALITY;
    }
}

function relink(_imageLink, _arbeitsdatei_RGB) {
    var newFile = new File(_arbeitsdatei_RGB);
    if (newFile.exists) {
        _imageLink.relink(newFile);
        try {
            if (_imageLink.status == LinkStatus.linkOutOfDate) {
                _imageLink.update();
            }
        } catch (e) {
            alert(e)
        }
    }
}




/*=================================================================================*/
function OpenImage(_image, _docFolder, _idDocName, _imageName_only, _hPPI, hScale, _interpolationMethod, _imageLink, _isWoodwing, _woodwing_imageID) {
    // try {
    //     if (_imageLink.isValid == true && _imageLink.constructor.name == "Rectangle") {
    //     }
    // } catch (e) {
    //     alert("Wähle das zubearbeitende Bild aus");
    // }

    try {
        _imageLink.editOriginal();
        BridgeTalk_processDoc(_image, _docFolder, _idDocName, _imageName_only, suffixRGB, _hPPI, hScale, minAufloesung, ZielAufloesung, _interpolationMethod, _imageLink, _isWoodwing, woodwing_mainFolder, _woodwing_imageID);
    } catch (e) {
        alert(e)
    }
}



function BridgeTalk_processDoc(_image, _docFolder, _idDocName, _imageName_only, _suffixRGB, _hPPI, hScale, _minAufloesung, _ZielAufloesung, _interpolationMethod, _imageLink, _isWoodwing, _woodwing_mainFolder, _woodwing_imageID) {
    // $.writeln("__interpolationMethod: " + _interpolationMethod);
    // $.writeln("____imageLink.name2: " + _imageLink.name);
    // alert("ID _suffixRGB: " + _suffixRGB);
    // alert("ID _hPPI: " + _hPPI);
    var imageName = decodeURI(_imageLink.name);
    // var imageName_only = GetFileNameOnly(imageName);
    var bt = new BridgeTalk();
    bt.target = 'photoshop';
    bt.body = runPS.toSource() + "('" + _imageLink + "','" + _docFolder + "','" + _idDocName + "','" + _imageName_only + "','" + _suffixRGB + "','" + _hPPI + "','" + hScale + "','" + _minAufloesung + "','" + _ZielAufloesung + "','" + _interpolationMethod + "','" + imageName + "','" + _isWoodwing + "','" + _woodwing_mainFolder + "','" + _woodwing_imageID + "');";
    bt.onResult = function(resObj) {
        set_img2hq(_image);
        if(!_isWoodwing) {
            var imageFolder_RGB = new Folder(_docFolder + "/" + _idDocName);
            var arbeitsdatei_RGB =  decodeURI(imageFolder_RGB + "/" + _imageName_only + _suffixRGB + ".psd");
            relink(_imageLink, arbeitsdatei_RGB);
        }
    };
    bt.send(30);
}

function runPS(_imageLink, _docFolder, _idDocName, _imageName_only, _suffixRGB, _hPPI, hScale, _minAufloesung, _ZielAufloesung, _interpolationMethod, _imageName, _isWoodwing, _woodwing_mainFolder, _woodwing_imageID) {
    <!-- @import "../../build/A__psScripts/functions/basic.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/utils.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/view.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/LUT-burn.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/LUT-dodge.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/ready.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/dialog.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/meta.jsx"; -->
    <!-- @import "../../build/A__psScripts/functions/save.jsx"; -->
    
    /* app.bringToFront(); */
    prefSave();
    prefSet(DialogModes.NO, Units.MM);

    var _isWoodwing = (_isWoodwing === 'true');
    var _hPPI = parseFloat(_hPPI);
    var _minAufloesung = parseFloat(_minAufloesung);
    var _ZielAufloesung = parseFloat(_ZielAufloesung);
    var hScale = parseFloat(hScale);
    var idDocName_only = GetFileNameOnly(decodeURI(_idDocName));

    
/*     alert("_imageLink: " + _imageLink);
    alert("_docFolder: " + _docFolder);
    alert("_idDocName: " + _idDocName);
    alert("idDocName_only: " + idDocName_only);
    alert("_suffixRGB: " + _suffixRGB);
    alert("_hPPI: " + _hPPI);
    alert("_interpolationMethod: " + _interpolationMethod);
    alert("isWoodwing: " + _isWoodwing);
    alert("_imageName: " + _imageName);
    alert("_imageName_only: " + _imageName_only);
    alert("_woodwing_mainFolder: " + _woodwing_mainFolder);
    alert("_woodwing_imageID: " + _woodwing_imageID); */
    

    var imageFolder_RGB = new Folder(_docFolder + "/" + idDocName_only);
    /* var docFolder = new Folder(mainFolder + subFolder); */
    if (!imageFolder_RGB.exists) imageFolder_RGB.create();

    var arbeitsdatei_RGB =  decodeURI(imageFolder_RGB + "/" + _imageName_only + _suffixRGB + ".psd");
    var woodwing_RGB =  decodeURI(_woodwing_mainFolder + _woodwing_imageID + "/" + _imageName_only + ".jpg");

    /* alert("_isWoodwing: " + _isWoodwing);
    alert("arbeitsdatei_RGB: " + arbeitsdatei_RGB);
    alert("woodwing_RGB: " + woodwing_RGB); */
    /* alert("_interpolationMethod: " + _interpolationMethod);
    alert(typeof _interpolationMethod); */
    

    var myPsDoc = app.documents.getByName(_imageName);
    if (myPsDoc) {
        app.activeDocument = myPsDoc;
    } else {
        alert("Kann das Bild nicht öffnen - Abbruch!");
        return;
    }

/*     function prefSave(_hier) {
        var obj = {};
        obj[_hier + "_RulerUnits"] = app.preferences.rulerUnits;
        return obj;
    }
    
    var result = prefSave("HIER");
    for (var key in result) {
        if (result.hasOwnProperty(key)) {
            alert(key + ": " + result[key]);
        }
    } */
    

/*     function temp_prefSave() {
        temp_saveRulerUnits = app.preferences.rulerUnits;
    }
    alert("0: " + app.preferences.rulerUnits);
    temp_prefSave();
    prefSet(startDisplayDialogs, Units.PIXELS);
    alert("1: " + app.preferences.rulerUnits);
    prefSet(startDisplayDialogs, temp_saveRulerUnits);
    alert("2: " + app.preferences.rulerUnits); */
    

    
    


    function chooseMethod(_interpolationMethod) {
        switch (_interpolationMethod) {
            case "0":
            case "keineInterpolation":
                myPsDoc.suspendHistory("Startschuss", "startschuss()");
                try {
                    myPsDoc.suspendHistory("Bildgröße Photoshop", "interpolation_PS(" + _hPPI + "," + _minAufloesung + "," + _ZielAufloesung + ")");
                } catch (e) {alert(e)}
                
                break;
            case "1":
                myPsDoc.suspendHistory("Bildgröße GigaPixel", "interpolation_GigaPixel(" + _hPPI + "," + _minAufloesung + ")");
                myPsDoc.suspendHistory("Startschuss", "startschuss()");
                break;
            case "2":
                myPsDoc.suspendHistory("Bildgröße PhotoAI", "interpolation_PhotoAI(" + _hPPI + "," + _minAufloesung + ")");
                myPsDoc.suspendHistory("Startschuss", "startschuss()");
                break;
            case "3":
                /* alert("Methode 3 ausgewählt"); */
                break;
            default:
                alert("Ungültiger Wert für _interpolationMethod");
        }
    }
    

    chooseMethod(_interpolationMethod);

    /* myPsDoc.suspendHistory("Startschuss", "startschuss()"); */



    if(!_isWoodwing) {
        alert("wird konventionell gespeichert");
        try {
            saveFile_PSD(new File(arbeitsdatei_RGB), f, t, f, t, t, f);
            /* saveJPG(1, 3, new File(imageFile_copyRGB), t, t, t); */
        } catch(e){alert(e)};
    } else {
        setMeta_3("isWoodwing", "true");
        setMeta_3("arbeitsdatei_RGB", arbeitsdatei_RGB);
        setMeta_3("woodwing_RGB", woodwing_RGB);
        setMeta_3("woodwing_file", _imageName);
        setMeta_3("idDocName", _idDocName);

        alert("wird Woodwing gespeichert");

        try {
            doc.suspendHistory("save Arbeitsdatei + Woodwing", "save_ArbeitWood_RGB()");
        } catch (e) {alert(e)}
        
    }

    startschuss_end();


   /* saveJPG(11, 3, new File("/Users/adrians/Arbeit/__temp/RGB/ohneProfil.jpg"), true, true, true); */
    function saveJPG(_quality, _scans, _file, _asCopy, _lowerCase, _embedProfiles) {
        var d = new ActionDescriptor();
        var d2 = new ActionDescriptor();
    
        d2.putInteger(s2t("extendedQuality"), _quality);
        d2.putInteger(s2t("scans"), _scans);
        d2.putEnumerated(s2t("matteColor"), s2t("matteColor"), s2t("none"));
        d.putObject(s2t("as"), s2t("JPEG"), d2);
        d.putPath(s2t("in"), _file);
        /* d.putInteger(s2t("documentID"), 65); */
        d.putBoolean(s2t("copy"), _asCopy);
        d.putBoolean(s2t("lowerCase"), _lowerCase);
        d.putBoolean(s2t("embedProfiles"), _embedProfiles);
        d.putEnumerated(s2t("saveStage"), s2t("saveStageType"), s2t("saveBegin"));
        executeAction(s2t("save"), d, DialogModes.NO);
    }

    function save_ArbeitWood_RGB () {
        saveJPG(2, 3, new File(woodwing_RGB), t, t, t);
        saveFile_PSD(new File(arbeitsdatei_RGB), f, t, f, t, t, f);
    }


    function startschuss_end() {
        fitScreen();
        if (getZoomLevel() >= 100) {
            zoom100();
        } else {
            zoomOut();
        }
        prefReset();
    }

    
}


