{"version":3,"file":"focus-visible.js","sourceRoot":"","sources":["focus-visible.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;EAUE;AAEF,OAAO,eAAe,CAAC;AAwBvB,OAAO,eAAe,CAAC;AAEvB,IAAI,eAAe,GAAG,IAAI,CAAC;AAE3B,IAAI;IACA,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;CACjD;AAAC,OAAO,KAAK,EAAE;IACZ,eAAe,GAAG,KAAK,CAAC;CAC3B;AAED;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAGrC,UAAa,EACZ,EAAE;;IACH,MAAM,sBAAsB,GAAG,CAC3B,QAA0B,EACK,EAAE;QACjC,kEAAkE;QAClE,oEAAoE;QACpE,gCAAgC;QAChC,IACI,QAAQ,CAAC,UAAU,IAAI,IAAI;YAC3B,QAAQ,CAAC,YAAY,CAAC,uBAAuB,CAAC,EAChD;YACE,gEAAgE;YAChE,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;SACnB;QAED,kEAAkE;QAClE,+BAA+B;QAC/B,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAChC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAEpD,IAAI,QAAQ,CAAC,eAAe,EAAE;gBAC1B,QAAQ,CAAC,eAAe,EAAE,CAAC;aAC9B;SACJ;aAAM;YACH,MAAM,mBAAmB,GAAG,GAAS,EAAE;gBACnC,IAAI,IAAI,CAAC,yBAAyB,IAAI,QAAQ,CAAC,UAAU,EAAE;oBACvD,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACvD;gBAED,IAAI,QAAQ,CAAC,eAAe,EAAE;oBAC1B,QAAQ,CAAC,eAAe,EAAE,CAAC;iBAC9B;YACL,CAAC,CAAC;YACF,iEAAiE;YACjE,4DAA4D;YAC5D,+DAA+D;YAC/D,SAAS;YACT,IAAI,CAAC,gBAAgB,CACjB,8BAA8B,EAC9B,mBAAmB,EACnB,EAAE,IAAI,EAAE,IAAI,EAAE,CACjB,CAAC;YAEF,OAAO,GAAG,EAAE;gBACR,IAAI,CAAC,mBAAmB,CACpB,8BAA8B,EAC9B,mBAAmB,CACtB,CAAC;YACN,CAAC,CAAC;SACL;QAED,gEAAgE;QAChE,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IACpB,CAAC,CAAC;IAEF,MAAM,wBAAwB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;IAEnE,oEAAoE;IACpE,sEAAsE;IACtE,qCAAqC;IACrC,MAAM,uBAAwB,SAAQ,UAAU;QAAhD;;YACY,QAA0B,GAA2C,IAAI,CAAC;QA+BtF,CAAC;QA7BG,gEAAgE;QAChE,YAAY;QACZ,iBAAiB;YACb,KAAK,CAAC,iBAAiB,IAAI,KAAK,CAAC,iBAAiB,EAAE,CAAC;YACrD,IAAI,CAAC,eAAe,EAAE;gBAClB,qBAAqB,CAAC,GAAG,EAAE;oBACvB,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,IAAI,EAAE;wBACxC,IAAI,CAAC,wBAAwB,CAAC,GAAG,sBAAsB,CACnD,IAAI,CACP,CAAC;qBACL;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC;QAED,oBAAoB;YAChB,KAAK,CAAC,oBAAoB,IAAI,KAAK,CAAC,oBAAoB,EAAE,CAAC;YAC3D,+DAA+D;YAC/D,mEAAmE;YACnE,IAAI,CAAC,eAAe,EAAE;gBAClB,qBAAqB,CAAC,GAAG,EAAE;oBACvB,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,IAAI,EAAE;wBACxC,oEAAoE;wBACpE,IAAI,CAAC,wBAAwB,CAAE,EAAE,CAAC;wBAClC,IAAI,CAAC,wBAAwB,CAAC,GAAG,IAAI,CAAC;qBACzC;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC;KACJ;SA/BY,wBAAwB;IAiCrC,OAAO,uBAAuB,CAAC;AACnC,CAAC,CAAC","sourcesContent":["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport 'focus-visible';\n\ndeclare global {\n    interface Window {\n        applyFocusVisiblePolyfill?: (scope: Document | ShadowRoot) => void;\n    }\n}\n\ntype Constructor<T = Record<string, unknown>> = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    new (...args: any[]): T;\n    prototype: T;\n};\n\ninterface OptionalLifecycleCallbacks {\n    connectedCallback?(): void;\n    disconnectedCallback?(): void;\n    manageAutoFocus?(): void;\n}\n\ntype MixableBaseClass = HTMLElement & OptionalLifecycleCallbacks;\n\ntype EndPolyfillCoordinationCallback = () => void;\n\nimport 'focus-visible';\n\nlet hasFocusVisible = true;\n\ntry {\n    document.body.querySelector(':focus-visible');\n} catch (error) {\n    hasFocusVisible = false;\n}\n\n/**\n * This mixin function is designed to be applied to a class that inherits\n * from HTMLElement. It makes it easy for a custom element to coordinate with\n * the :focus-visible polyfill.\n *\n * NOTE(cdata): The code here was adapted from an example proposed with the\n * introduction of ShadowDOM support in the :focus-visible polyfill.\n *\n * @see https://github.com/WICG/focus-visible/pull/196\n * @param {Function} SuperClass The base class implementation to decorate with\n * implementation that coordinates with the :focus-visible polyfill\n */\nexport const FocusVisiblePolyfillMixin = <\n    T extends Constructor<MixableBaseClass>\n>(\n    SuperClass: T\n): T => {\n    const coordinateWithPolyfill = (\n        instance: MixableBaseClass\n    ): EndPolyfillCoordinationCallback => {\n        // If there is no shadow root, there is no need to coordinate with\n        // the polyfill. If we already coordinated with the polyfill, we can\n        // skip subsequent invokcations:\n        if (\n            instance.shadowRoot == null ||\n            instance.hasAttribute('data-js-focus-visible')\n        ) {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            return () => {};\n        }\n\n        // The polyfill might already be loaded. If so, we can apply it to\n        // the shadow root immediately:\n        if (self.applyFocusVisiblePolyfill) {\n            self.applyFocusVisiblePolyfill(instance.shadowRoot);\n\n            if (instance.manageAutoFocus) {\n                instance.manageAutoFocus();\n            }\n        } else {\n            const coordinationHandler = (): void => {\n                if (self.applyFocusVisiblePolyfill && instance.shadowRoot) {\n                    self.applyFocusVisiblePolyfill(instance.shadowRoot);\n                }\n\n                if (instance.manageAutoFocus) {\n                    instance.manageAutoFocus();\n                }\n            };\n            // Otherwise, wait for the polyfill to be loaded lazily. It might\n            // never be loaded, but if it is then we can apply it to the\n            // shadow root at the appropriate time by waiting for the ready\n            // event:\n            self.addEventListener(\n                'focus-visible-polyfill-ready',\n                coordinationHandler,\n                { once: true }\n            );\n\n            return () => {\n                self.removeEventListener(\n                    'focus-visible-polyfill-ready',\n                    coordinationHandler\n                );\n            };\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        return () => {};\n    };\n\n    const $endPolyfillCoordination = Symbol('endPolyfillCoordination');\n\n    // IE11 doesn't natively support custom elements or JavaScript class\n    // syntax The mixin implementation assumes that the user will take the\n    // appropriate steps to support both:\n    class FocusVisibleCoordinator extends SuperClass {\n        private [$endPolyfillCoordination]: EndPolyfillCoordinationCallback | null = null;\n\n        // Attempt to coordinate with the polyfill when connected to the\n        // document:\n        connectedCallback(): void {\n            super.connectedCallback && super.connectedCallback();\n            if (!hasFocusVisible) {\n                requestAnimationFrame(() => {\n                    if (this[$endPolyfillCoordination] == null) {\n                        this[$endPolyfillCoordination] = coordinateWithPolyfill(\n                            this\n                        );\n                    }\n                });\n            }\n        }\n\n        disconnectedCallback(): void {\n            super.disconnectedCallback && super.disconnectedCallback();\n            // It's important to remove the polyfill event listener when we\n            // disconnect, otherwise we will leak the whole element via window:\n            if (!hasFocusVisible) {\n                requestAnimationFrame(() => {\n                    if (this[$endPolyfillCoordination] != null) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        this[$endPolyfillCoordination]!();\n                        this[$endPolyfillCoordination] = null;\n                    }\n                });\n            }\n        }\n    }\n\n    return FocusVisibleCoordinator;\n};\n"]}